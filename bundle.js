(()=>{var e={697:e=>{e.exports=function(e,t){e.sort(((e,t)=>e-t));const n={};n.classInterval=function(e,t){const n=Math.max(...e)-Math.min(...e),a=Math.ceil(n/t),r=[],s=Math.min(...e)+(a*t-1);for(let t=Math.min(...e);t<=s;t+=a)r.push({min:t,max:t+(a-1)});return r}(e,t),n.classBoundaries=n.classInterval.map((e=>({min:e.min-.5,max:e.max+.5}))),n.classMark=n.classInterval.map((e=>(e.min+e.max)/2)),n.classFrequency=[];for(let a=0;a<t;a+=1){n.classFrequency.push(0);for(let t=0;t<e.length;t+=1)e[t]>=n.classInterval[a].min&&e[t]<=n.classInterval[a].max&&(n.classFrequency[a]+=1)}return n.relativeFrequency=n.classFrequency.map((t=>Number((t/e.length).toFixed(3)))),n}}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var s=t[a]={exports:{}};return e[a](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var a={};(()=>{"use strict";n.d(a,{b:()=>f});var e=n(697),t=n.n(e);const r=document.querySelector("main"),s=document.createElement("div");function l(e){const{key:t}=e;return t>="0"&&t<="9"||(e.preventDefault(),!1)}function c(e){const{key:t}=e;return t>="0"&&t<="9"||","===t||"."===t||(e.preventDefault(),!1)}s.id="frq-dist-u-table";const i=document.querySelector("nav #nav-button"),o=document.querySelector("aside");function d(e){o.contains(e.target)||i.contains(e.target)||o.classList.contains("hidden")||(o.classList.add("hidden"),window.removeEventListener("click",d))}i.onclick=()=>{o.classList.toggle("hidden"),window.addEventListener("click",d)};const u=document.querySelector("main").innerHTML,m=document.querySelector("header img"),h=document.querySelector("main"),p=document.querySelectorAll("aside button");function f(e){if(e){let t=e.firstChild;for(;t;)t.remove(),t=e.firstChild}}m.onclick=()=>{f(h),h.innerHTML=u},p.forEach((e=>{e.addEventListener("click",(()=>{f(h)}))})),p[0].addEventListener("click",(function(){const e=document.createElement("h2");e.textContent="# Frequency Distribution Table (Ungrouped)";const n=document.createElement("div");n.innerHTML="<p>Important characteristics of a large mass of data can be readily assessed by <b>grouping the data into different classes</b> and then determining the number of observations that fall in each of the classes.</p>",n.innerHTML+="<p>Such an arrangement in tabular form is called a frequency distribution</p>";const a=document.createElement("form");a.id="frq-dist-u-form",function(e){const n=document.createElement("label");n.textContent="Data Set (e.g., 1,2,3):";const a=document.createElement("input");a.type="text",a.name="dataset",a.placeholder="1,2,3",n.appendChild(a),a.addEventListener("keypress",c);const r=document.createElement("label");r.textContent="Number of Classes:";const i=document.createElement("input");i.type="text",i.name="numClasses",i.placeholder="1 - 999",i.maxLength="3",r.appendChild(i),r.appendChild(i),i.addEventListener("keypress",l);const o=document.createElement("label"),d=document.createElement("input");d.type="checkbox",d.name="population",d.checked=!0,o.appendChild(d),o.appendChild(document.createTextNode(" Population"));const u=document.createElement("label"),m=document.createElement("input");m.type="checkbox",m.name="sample",u.appendChild(m),u.appendChild(document.createTextNode(" Sample"));const h=[d,m];h.forEach((e=>{e.addEventListener("change",(e=>{h.forEach((t=>{t.checked||t===e.target?t!==e.target&&(t.checked=!1):t.checked=!0}))}))})),a.setAttribute("required",!0),i.setAttribute("required",!0);const p=document.createElement("button");p.textContent="Show Frequency Distribution",p.type="submit";const v=document.createElement("p");v.textContent="All* fields are required",v.style.display="none",v.style.color="red",v.style.textAlign="center",p.addEventListener("click",(e=>{e.preventDefault(),f(s),a.value&&i.value?(function(e,n,a){const r=t()(e,n),l=document.createElement("table"),c=l.insertRow();["Class Interval","Class Boundaries","Class Mark","Class Frequency","Relative Frequency"].forEach((e=>{const t=document.createElement("th");t.textContent=e,c.appendChild(t)}));for(let e=0;e<n;e+=1){const t=l.insertRow(),n=t.insertCell(),a=r.classInterval[e];n.textContent=`${a.min} - ${a.max}`;const s=t.insertCell(),c=r.classBoundaries[e];s.textContent=`${c.min} - ${c.max}`,["classMark","classFrequency","relativeFrequency"].forEach((n=>{t.insertCell().textContent=r[n][e]}))}s.appendChild(l)}(a.value.split(",").map(Number),Number(i.value),d.checked),v.style.display="none"):v.style.display="block"})),e.append(n,r,o,u,p,v)}(a);const i=document.createElement("div");i.innerHTML="<h3>✏️ How It Works</h3>",i.innerHTML+="<p>From the data entered, the calculator computes for the <b>class width</b> (range / class number) rounded <i>up</i> to the nearest whole number. <i>(<b>range</b> = min - max)</i></p>",i.innerHTML+="Using the computed class width, the calculator now computes for the <b>class intervals</b> of the data. Starting with the lowest value in the data set which will be used as base for the lower class interval, the calculator will add a value of (class width - 1) to get the higher class interval. The value of class width will be added to the following class intervals.",i.innerHTML+="<p><code><pre>\n  const maxClassInterval = Math.min(...dataSet) + ((classWidth * classNumber) - 1);\n  for (let i = Math.min(...dataSet); i <= maxClassInterval; i += classWidth) {\n    classInterval.push({ min: i, max: i + (classWidth - 1) });\n  }\n  </pre></code></p>",i.innerHTML+="The calculator proceeds to computing the <b>class boundaries</b> by subtracting 0.5 to the lower value of class intervals and adding 0.5 to the higher value of class intervals.",i.innerHTML+="<p><code><pre>\n  classBoundaries = classInterval.map((classInt) => ({\n    min: classInt.min - 0.5,\n    max: classInt.max + 0.5,\n  }));\n  </pre></code></p>",i.innerHTML+="<b>Class mark</b> is computed by adding the lower and higher value of the corresponding interval and dividing them to 2",i.innerHTML+="<p><code><pre>\n  classMark = fTable.classInterval.map((classInt) => (classInt.min + classInt.max) / 2);\n  </pre></code></p>",i.innerHTML+="The calculator computes the <b>frequency</b> of values within each class interval by tallying the number of data points that fall into each interval.",i.innerHTML+="<p><code><pre>\n  classFrequency = [];\n  for (let i = 0; i < classNumber; i += 1) {\n    classFrequency.push(0);\n    for (let j = 0; j < dataSet.length; j += 1) {\n      if (dataSet[j] >= classInterval[i].min && dataSet[j] <= classInterval[i].max) {\n        classFrequency[i] += 1;\n      }\n    }\n  }\n  </pre></code></p>",i.innerHTML+="The <b>relative frequency</b> for each class interval is calculated by dividing the corresponding class frequency by the total number of data points in the dataset, resulting in a proportional value for each interval. <i>The resulting value that has any fractional part of the number will have a maximum of three decimal places.</i>",i.innerHTML+="<p><code><pre>\n  fTable.relativeFrequency = fTable.classFrequency.map((frequency) => (\n    Number((frequency / dataSet.length).toFixed(3))\n  ));\n  </pre></code></p>",r.append(e,n,a,s,i)}))})()})();